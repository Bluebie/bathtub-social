* {
  box-sizing: border-box;
}

:root {
  --anim-duration: 1s;
  --anim-fn: ease;

  /* color schemes support */
  --bg-hue: 0deg;
  --bg-sat: 0%;
  --bg-lum: 100%;

  --fg-hue: 0deg;
  --fg-sat: 0%;
  --fg-lum: 0%;
}

@media (prefers-color-scheme: dark) {
  :root {
    --bg-lum: 10%;
    --fg-lum: 95%;
  }
}

html, body {
  background-color: hsl(var(--bg-hue) var(--bg-sat) var(--bg-lum));
  color: hsl(var(--fg-hue) var(--fg-sat) var(--fg-lum));
}

/* css animation to playback a filmstrip in an avatar */
.avatar {
  --scale: 1.0;
  --border-width: 3px;
  --size: 64px;
  border-radius: 35px;
  width: 64px;
  height: 64px;
  transform: scale(var(--scale)) translateY(calc(64px * (1.0 - (var(--scale)))));

  border: 3px solid transparent;
  background-image: linear-gradient(to top,    hsl(var(--hue), 75%, 65%), hsl(var(--hue), 85%, 55%)),
                    linear-gradient(to bottom, hsl(var(--hue), 75%, 65%), hsl(var(--hue), 85%, 55%));
  background-origin: border-box;
  background-clip: content-box, border-box;
  box-sizing: border-box;

  transition: border-color var(--anim-duration) var(--anim-fn);
}

.avatar .image {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  display: block;
}

.avatar.myself .image {
  transform: scaleX(-1);
}

.avatar .decoration {
  position: absolute;
  width: calc(var(--size) * 2);
  height: calc(var(--size) * 2);
  margin-left: calc((var(--size) * -0.5) - var(--border-width));
  margin-top: calc((var(--size) * -0.5) - var(--border-width));
  top: 0; left: 0;
}

/* habbo hotel style bubbles, demo: https://codepen.io/bluebie/pen/abvzqvj?editors=1100 */
.bubble-row {
  display: flex;
}

.bubble-row .spacer { transition: flex-grow var(--anim-duration) var(--anim-fn); }
.bubble-row .spacer.left { flex-grow: calc(var(--x) * 1000) }
.bubble-row .spacer.right { flex-grow: calc((1.0 - var(--x)) * 1000) }

.bubble-row .bubble {
  --border-width: 2px;
  --border-color: hsl(var(--hue) 80% 60%);
  --fill-color: hsl(var(--hue) 60% 95%);
  flex-grow: 0;
  color: hsl(var(--hue) 30% 20%);
  font-family: sans-serif;
  --pointer-size: 7px;
  border: var(--border-width) solid var(--border-color);
  border-radius: 8px;
  background-color: var(--fill-color);
  margin-bottom: 12px;
  padding: 3px 7px 3px 7px;
  position: relative;
  min-height: 12px;
  
  transition: 
  background-color var(--anim-duration) var(--anim-fn),
  border-color var(--anim-duration) var(--anim-fn),
  color var(--anim-duration) var(--anim-fn);
}

@media (prefers-color-scheme: dark) {
  .bubble-row .bubble {
    --fill-color: hsl(var(--hue) 60% 20%);
    color: hsl(var(--hue) 100% 95%);
  }
}

.bubble-row .bubble::before {
  /* calc stuff */
  /* aproximate hypotonuse theorum */
  --aprox-hypot: 1.4142135624;
  left: calc(var(--x) * (100% - (var(--pointer-size) * 2)));
  bottom: calc((var(--pointer-size) * -2) - 1px);

  display: block;
  content: ""; width: 0; height: 0;
  position: absolute;
  border: var(--pointer-size) solid transparent;
  border-top-color: var(--border-color);

  transition:
  left var(--anim-duration) var(--anim-fn),
  background-color var(--anim-duration) var(--anim-fn),
  border-color var(--anim-duration) var(--anim-fn);
}


/* development testing text-room styling */
.chat-log {
  flex-grow: 100;
  /* box-shadow: inset 1px 8px 30px -7px hsla(0deg, 0%, 0%, 50%); */
  overflow-x: scroll;
  padding-top: 2ex;
  padding-left: 1ex;
  padding-right: 1ex;
  pointer-events: none; /* don't capture clicks on me */
  z-index: 100000;
}

.presence-list {
  width: 20em;
  flex-grow: 0;
  padding: 1ex;
  box-sizing: border-box;
  overflow-x: scroll;
}

.presence-list .person::before {
  content: "● ";
  color: hsl(var(--hue) 80% 60%);
  transition: color var(--anim-duration) var(--anim-fn);
}

.text-composer {
  display: flex;
  height: 2em;
}

.text-composer * { margin: 0.5ex; }
.text-composer input[type=text] { flex-grow: 1; margin-right: 0; background-color: inherit; color: inherit; }


.layer-map {
  overflow-y: scroll;
  position: relative;
}

.layer-map > .layers {
  width: var(--layers-width);
  height: var(--layers-height);
}

.layer-map > .layers > img.layer {
  position: absolute;
  pointer-events: none; /* don't capture clicks, let them through to the container */
}

.layer-map .avatar {
  position: absolute;
  margin-left: calc(var(--size) * -0.5);
  margin-top: calc(var(--size) * -1.0);
  transition: all var(--anim-duration) var(--anim-fn);
}

body.bathtub-room { height: 100vh; padding: 0; margin: 0; overflow: hidden; }

.vertical-flex {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.horizontal-flex {
  display: flex;
  flex-direction: horizontal;
  height: 100%;
}

.horizontal-flex > .expand, .vertical-flex > .expand {
  flex-grow: 100;
}

.stack { position: relative; height: 100%; width: 100%; overflow: hidden; }
.stack > * { position: absolute; height: 100%; width: 100%; }